{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sparkify_users_churn_prediction\n",
    "\n",
    "\n",
    "## Table of contents\n",
    "* [Introduction](#introduction)\n",
    "* [Data](#data)\n",
    "* [Exploration](#exploration)\n",
    "* [Modeling](#Modeling)\n",
    "\n",
    "\n",
    "\n",
    "## Introduction\n",
    "\n",
    "**What is churn and what is churn rate?**\n",
    "\n",
    "First thing first, what is churn? Customer churn is the loss of clients or customers.\n",
    "\n",
    "And the metrics to measure Customer churn is Customer churn rate, which is the proportion of contractual customers or subscribers \n",
    "\n",
    "who leave a supplier during a given time period. \n",
    "\n",
    "\n",
    "**Why Customer/User churn matters?**\n",
    "\n",
    "The cost to aquire a new customer is about 5-25 times that to retain an existing customer. \n",
    "\n",
    "The probability of selling to an existing customer is 60-70%, while it is only 5-20% for a new customer.\n",
    "\n",
    "What's more, reserach also finds that reducing the churn rate by 5% could cause the profit increase by 25-90%.\n",
    "\n",
    "So customer is a big deal for SaaS or other subscription-based business.\n",
    "\n",
    "**Business problem for this project**\n",
    "\n",
    "Sparkify is a pseudo popular digital music service similar to Spotify or Pandora. \n",
    "\n",
    "Millions of users listen to their favorite songs on Sparkify every day either using the free tier that place advertisements \n",
    "\n",
    "between the songs or using the premium subscription model,where they access music as free but pay a monthly flat rate. \n",
    "\n",
    "Users can upgrade, downgrade, or cancel their service at any time. \n",
    "\n",
    "If we can accurately identify the users at risk before they leave, the business can offer them discounts and \n",
    "\n",
    "incentives, potentially saving the business millions in revenue.\n",
    "\n",
    "However it should be noted that the stackholder of this project is not only Sparkify or music streaming service providers, other \n",
    "\n",
    "business like mobile phone service, bank, internet services to whom churn rate matters a lot could also gain some insights from \n",
    "\n",
    "this project and apply to their own business model.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## Data \n",
    "\n",
    "Every time a user interacts with the Sparkify service while they're playing songs, logging out, like in a song with a thumbs up, \n",
    "\n",
    "hearing an ad,or downgrading their service, it generates data.\n",
    "\n",
    "The data we are using is right this user generated data.\n",
    "\n",
    "The full dataset is 12GB, for this project, we will use a a tiny subset dataset which is 128M to explore the data and build a prediction model.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploration\n",
    "### Import libraries and start a spark session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import pyspark\n",
    "from pyspark import SparkConf\n",
    "from pyspark import RDD\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import udf\n",
    "from pyspark.sql.types import StringType\n",
    "from pyspark.sql.types import IntegerType\n",
    "from pyspark.sql.functions import desc\n",
    "from pyspark.sql.functions import asc\n",
    "from pyspark.sql.functions import sum as Fsum\n",
    "from pyspark.sql.functions import isnan, when, count, col\n",
    "from pyspark.sql import Window\n",
    "from functools import reduce\n",
    "from pyspark.ml import Pipeline\n",
    "from pyspark.ml.classification import LogisticRegression, LinearSVC, RandomForestClassifier\n",
    "from pyspark.ml.evaluation import MulticlassClassificationEvaluator, BinaryClassificationEvaluator\n",
    "from pyspark.ml.feature import CountVectorizer, IDF, Normalizer, PCA, RegexTokenizer, StandardScaler, StopWordsRemover, StringIndexer, VectorAssembler\n",
    "from pyspark.ml.regression import LinearRegression\n",
    "from pyspark.ml.tuning import CrossValidator, ParamGridBuilder\n",
    "\n",
    "from datetime import datetime\n",
    "import time\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a Spark session\n",
    "spark = SparkSession \\\n",
    "    .builder \\\n",
    "    .appName('Sparkify') \\\n",
    "    .getOrCreate()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('spark.app.id', 'local-1584618532634'),\n",
       " ('spark.driver.port', '36075'),\n",
       " ('spark.rdd.compress', 'True'),\n",
       " ('spark.app.name', 'Sparkify'),\n",
       " ('spark.driver.host', 'fbe0e9e402ee'),\n",
       " ('spark.serializer.objectStreamReset', '100'),\n",
       " ('spark.master', 'local[*]'),\n",
       " ('spark.executor.id', 'driver'),\n",
       " ('spark.submit.deployMode', 'client'),\n",
       " ('spark.ui.showConsoleProgress', 'true')]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the context of the Spark session\n",
    "spark.sparkContext.getConf().getAll()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <div>\n",
       "                <p><b>SparkSession - in-memory</b></p>\n",
       "                \n",
       "        <div>\n",
       "            <p><b>SparkContext</b></p>\n",
       "\n",
       "            <p><a href=\"http://fbe0e9e402ee:4040\">Spark UI</a></p>\n",
       "\n",
       "            <dl>\n",
       "              <dt>Version</dt>\n",
       "                <dd><code>v2.4.3</code></dd>\n",
       "              <dt>Master</dt>\n",
       "                <dd><code>local[*]</code></dd>\n",
       "              <dt>AppName</dt>\n",
       "                <dd><code>Sparkify</code></dd>\n",
       "            </dl>\n",
       "        </div>\n",
       "        \n",
       "            </div>\n",
       "        "
      ],
      "text/plain": [
       "<pyspark.sql.session.SparkSession at 0x7f0c05fece48>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print out the Spark session\n",
    "spark"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and Clean Dataset\n",
    "The mini-dataset file is named `mini_sparkify_event_data.json`. In the cells below we will load the dataset, checking for missing, duplicated or invalid data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load data\n",
    "path = 'mini_sparkify_event_data.json'\n",
    "df = spark.read.json(path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- artist: string (nullable = true)\n",
      " |-- auth: string (nullable = true)\n",
      " |-- firstName: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- lastName: string (nullable = true)\n",
      " |-- length: double (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- location: string (nullable = true)\n",
      " |-- method: string (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- registration: long (nullable = true)\n",
      " |-- sessionId: long (nullable = true)\n",
      " |-- song: string (nullable = true)\n",
      " |-- status: long (nullable = true)\n",
      " |-- ts: long (nullable = true)\n",
      " |-- userAgent: string (nullable = true)\n",
      " |-- userId: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# check the columns of the data\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of columns\n",
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "286500"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check number of records\n",
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our dataset has 18 columns with 286500 records.\n"
     ]
    }
   ],
   "source": [
    "print('Our dataset has {} columns with {} records.'.format(len(df.columns), df.count()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+----------+---------+------+------------------+--------+-----------------+------+-----------------+------+-------+--------------------+-----------------+--------------------+------------------+--------------------+--------------------+-----------------+\n",
      "|summary|            artist|      auth|firstName|gender|     itemInSession|lastName|           length| level|         location|method|   page|        registration|        sessionId|                song|            status|                  ts|           userAgent|           userId|\n",
      "+-------+------------------+----------+---------+------+------------------+--------+-----------------+------+-----------------+------+-------+--------------------+-----------------+--------------------+------------------+--------------------+--------------------+-----------------+\n",
      "|  count|            228108|    286500|   278154|278154|            286500|  278154|           228108|286500|           278154|286500| 286500|              278154|           286500|              228108|            286500|              286500|              278154|           286500|\n",
      "|   mean| 551.0852017937219|      null|     null|  null|114.41421291448516|    null|249.1171819778458|  null|             null|  null|   null|1.535358834084427...|1041.526554973822|            Infinity|210.05459685863875|1.540956889810483...|                null|59682.02278593872|\n",
      "| stddev|1217.7693079161374|      null|     null|  null|129.76726201140994|    null|99.23517921058361|  null|             null|  null|   null| 3.291321616327586E9|726.7762634630741|                 NaN| 31.50507848842214|1.5075439608226302E9|                null|109091.9499991047|\n",
      "|    min|               !!!| Cancelled| Adelaida|     F|                 0|   Adams|          0.78322|  free|       Albany, OR|   GET|  About|       1521380675000|                1|\u001c",
      "ÃÂg ÃÂtti Gr...|               200|       1538352117000|\"Mozilla/5.0 (Mac...|                 |\n",
      "|    max| ÃÂlafur Arnalds|Logged Out|   Zyonna|     M|              1321|  Wright|       3024.66567|  paid|Winston-Salem, NC|   PUT|Upgrade|       1543247354000|             2474|ÃÂau hafa slopp...|               404|       1543799476000|Mozilla/5.0 (comp...|               99|\n",
      "+-------+------------------+----------+---------+------+------------------+--------+-----------------+------+-----------------+------+-------+--------------------+-----------------+--------------------+------------------+--------------------+--------------------+-----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# statistical description\n",
    "df.describe().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the count we could see that not all the variables have 286500 records, that is to say, there are some missing values in some of the variables, we will dive deep into that later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------------+---------+---------+------+-------------+--------+---------+-----+--------------------+------+--------+-------------+---------+--------------------+------+-------------+--------------------+------+\n",
      "|          artist|     auth|firstName|gender|itemInSession|lastName|   length|level|            location|method|    page| registration|sessionId|                song|status|           ts|           userAgent|userId|\n",
      "+----------------+---------+---------+------+-------------+--------+---------+-----+--------------------+------+--------+-------------+---------+--------------------+------+-------------+--------------------+------+\n",
      "|  Martha Tilston|Logged In|    Colin|     M|           50| Freeman|277.89016| paid|     Bakersfield, CA|   PUT|NextSong|1538173362000|       29|           Rockpools|   200|1538352117000|Mozilla/5.0 (Wind...|    30|\n",
      "|Five Iron Frenzy|Logged In|    Micah|     M|           79|    Long|236.09424| free|Boston-Cambridge-...|   PUT|NextSong|1538331630000|        8|              Canada|   200|1538352180000|\"Mozilla/5.0 (Win...|     9|\n",
      "|    Adam Lambert|Logged In|    Colin|     M|           51| Freeman| 282.8273| paid|     Bakersfield, CA|   PUT|NextSong|1538173362000|       29|   Time For Miracles|   200|1538352394000|Mozilla/5.0 (Wind...|    30|\n",
      "|          Enigma|Logged In|    Micah|     M|           80|    Long|262.71302| free|Boston-Cambridge-...|   PUT|NextSong|1538331630000|        8|Knocking On Forbi...|   200|1538352416000|\"Mozilla/5.0 (Win...|     9|\n",
      "|       Daft Punk|Logged In|    Colin|     M|           52| Freeman|223.60771| paid|     Bakersfield, CA|   PUT|NextSong|1538173362000|       29|Harder Better Fas...|   200|1538352676000|Mozilla/5.0 (Wind...|    30|\n",
      "+----------------+---------+---------+------+-------------+--------+---------+-----+--------------------+------+--------+-------------+---------+--------------------+------+-------------+--------------------+------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# show the first 5 rows\n",
    "df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist='Martha Tilston', auth='Logged In', firstName='Colin', gender='M', itemInSession=50, lastName='Freeman', length=277.89016, level='paid', location='Bakersfield, CA', method='PUT', page='NextSong', registration=1538173362000, sessionId=29, song='Rockpools', status=200, ts=1538352117000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0', userId='30'),\n",
       " Row(artist='Five Iron Frenzy', auth='Logged In', firstName='Micah', gender='M', itemInSession=79, lastName='Long', length=236.09424, level='free', location='Boston-Cambridge-Newton, MA-NH', method='PUT', page='NextSong', registration=1538331630000, sessionId=8, song='Canada', status=200, ts=1538352180000, userAgent='\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.103 Safari/537.36\"', userId='9'),\n",
       " Row(artist='Adam Lambert', auth='Logged In', firstName='Colin', gender='M', itemInSession=51, lastName='Freeman', length=282.8273, level='paid', location='Bakersfield, CA', method='PUT', page='NextSong', registration=1538173362000, sessionId=29, song='Time For Miracles', status=200, ts=1538352394000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0', userId='30'),\n",
       " Row(artist='Enigma', auth='Logged In', firstName='Micah', gender='M', itemInSession=80, lastName='Long', length=262.71302, level='free', location='Boston-Cambridge-Newton, MA-NH', method='PUT', page='NextSong', registration=1538331630000, sessionId=8, song='Knocking On Forbidden Doors', status=200, ts=1538352416000, userAgent='\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.103 Safari/537.36\"', userId='9'),\n",
       " Row(artist='Daft Punk', auth='Logged In', firstName='Colin', gender='M', itemInSession=52, lastName='Freeman', length=223.60771, level='paid', location='Bakersfield, CA', method='PUT', page='NextSong', registration=1538173362000, sessionId=29, song='Harder Better Faster Stronger', status=200, ts=1538352676000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0', userId='30')]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# take the first 5 rows\n",
    "df.take(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----+---------+------+-------------+--------+------+-----+--------+------+----+------------+---------+-----+------+---+---------+------+\n",
      "|artist|auth|firstName|gender|itemInSession|lastName|length|level|location|method|page|registration|sessionId| song|status| ts|userAgent|userId|\n",
      "+------+----+---------+------+-------------+--------+------+-----+--------+------+----+------------+---------+-----+------+---+---------+------+\n",
      "| 58392|   0|     8346|  8346|            0|    8346| 58392|    0|    8346|     0|   0|        8346|        0|58392|     0|  0|     8346|     0|\n",
      "+------+----+---------+------+-------------+--------+------+-----+--------+------+----+------------+---------+-----+------+---+---------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# check missing values\n",
    "df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in df.columns]).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above we can see that there are some missing values, some variables have 8346 missing values while the 'artist', 'length' and 'song' variable have as many as 58392 missing values. We will take a deep look into these variables to see what we can do to deal with the missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist=None, auth='Logged Out', firstName=None, gender=None, itemInSession=100, lastName=None, length=None, level='free', location=None, method='GET', page='Home', registration=None, sessionId=8, song=None, status=200, ts=1538355745000, userAgent=None, userId=''),\n",
       " Row(artist=None, auth='Logged Out', firstName=None, gender=None, itemInSession=101, lastName=None, length=None, level='free', location=None, method='GET', page='Help', registration=None, sessionId=8, song=None, status=200, ts=1538355807000, userAgent=None, userId=''),\n",
       " Row(artist=None, auth='Logged Out', firstName=None, gender=None, itemInSession=102, lastName=None, length=None, level='free', location=None, method='GET', page='Home', registration=None, sessionId=8, song=None, status=200, ts=1538355841000, userAgent=None, userId=''),\n",
       " Row(artist=None, auth='Logged Out', firstName=None, gender=None, itemInSession=103, lastName=None, length=None, level='free', location=None, method='PUT', page='Login', registration=None, sessionId=8, song=None, status=307, ts=1538355842000, userAgent=None, userId=''),\n",
       " Row(artist=None, auth='Logged Out', firstName=None, gender=None, itemInSession=2, lastName=None, length=None, level='free', location=None, method='GET', page='Home', registration=None, sessionId=240, song=None, status=200, ts=1538356678000, userAgent=None, userId='')]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.where(col('firstName').isNull()).take(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+-----+\n",
      "|level|count|\n",
      "+-----+-----+\n",
      "| free| 2617|\n",
      "| paid| 5729|\n",
      "+-----+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.where(col('firstName').isNull()).groupby('level').count().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----+\n",
      "|userId|count|\n",
      "+------+-----+\n",
      "|      | 8346|\n",
      "+------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.where(col('firstName').isNull()).groupby('userId').count().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the 8346 records with missing values in columns 'firstName', 'gender', etc, 2617 of them are free users and 5729 are paid users, although the userId of these records are not shown as null, they are all '', makes not difference. \n",
    "We will just drop these 8346 records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "278154"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.dropna(how='any', subset=['firstName'])\n",
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist=None, auth='Logged In', firstName='Colin', gender='M', itemInSession=54, lastName='Freeman', length=None, level='paid', location='Bakersfield, CA', method='PUT', page='Add to Playlist', registration=1538173362000, sessionId=29, song=None, status=200, ts=1538352905000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0', userId='30'),\n",
       " Row(artist=None, auth='Logged In', firstName='Micah', gender='M', itemInSession=84, lastName='Long', length=None, level='free', location='Boston-Cambridge-Newton, MA-NH', method='GET', page='Roll Advert', registration=1538331630000, sessionId=8, song=None, status=200, ts=1538353150000, userAgent='\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.103 Safari/537.36\"', userId='9'),\n",
       " Row(artist=None, auth='Logged In', firstName='Micah', gender='M', itemInSession=86, lastName='Long', length=None, level='free', location='Boston-Cambridge-Newton, MA-NH', method='PUT', page='Thumbs Up', registration=1538331630000, sessionId=8, song=None, status=307, ts=1538353376000, userAgent='\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.103 Safari/537.36\"', userId='9'),\n",
       " Row(artist=None, auth='Logged In', firstName='Alexi', gender='F', itemInSession=4, lastName='Warren', length=None, level='paid', location='Spokane-Spokane Valley, WA', method='GET', page='Downgrade', registration=1532482662000, sessionId=53, song=None, status=200, ts=1538354749000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0', userId='54'),\n",
       " Row(artist=None, auth='Logged In', firstName='Alexi', gender='F', itemInSession=7, lastName='Warren', length=None, level='paid', location='Spokane-Spokane Valley, WA', method='PUT', page='Thumbs Up', registration=1532482662000, sessionId=53, song=None, status=307, ts=1538355255000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0', userId='54')]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# take 5 records with missing values in column 'artist'\n",
    "df.where(col('artist').isNull()).take(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seems like records where only 'artist', 'length', 'song' columns have missing value is just simply because the user is not playing a song at the moment. Values of other variables should still be able to provide us some insights, we will keep those records."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check duplicates\n",
    "if df.count() > df.dropDuplicates(df.columns).count():\n",
    "    raise ValueError('Data has duplicates')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is not very intuitive to check duplicates in pyspark, but the checking above indicates that there is no missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After cleaning, our dataset has 18 columns with 278154 records.\n"
     ]
    }
   ],
   "source": [
    "print('After cleaning, our dataset has {} columns with {} records.'.format(len(df.columns), df.count()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis\n",
    "### Preliminary analysis\n",
    "\n",
    "We will do some initial analysis to better understand the values distribution of each variable \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**artist**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>artist</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kings Of Leon</td>\n",
       "      <td>1841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Coldplay</td>\n",
       "      <td>1813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Florence + The Machine</td>\n",
       "      <td>1236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dwight Yoakam</td>\n",
       "      <td>1135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BjÃÂ¶rk</td>\n",
       "      <td>1133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>The Black Keys</td>\n",
       "      <td>1125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Muse</td>\n",
       "      <td>1090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Justin Bieber</td>\n",
       "      <td>1044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Jack Johnson</td>\n",
       "      <td>1007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Eminem</td>\n",
       "      <td>953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   artist  count\n",
       "0           Kings Of Leon   1841\n",
       "1                Coldplay   1813\n",
       "2  Florence + The Machine   1236\n",
       "3           Dwight Yoakam   1135\n",
       "4                BjÃÂ¶rk   1133\n",
       "5          The Black Keys   1125\n",
       "6                    Muse   1090\n",
       "7           Justin Bieber   1044\n",
       "8            Jack Johnson   1007\n",
       "9                  Eminem    953"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# value count of artist excluding the null values\n",
    "artist_counts = df.where(col('artist').isNotNull()).groupby('artist').count().sort('count', ascending=False).toPandas()\n",
    "top10_artist = artist_counts.head(10).sort_values(by='count', ascending=False)\n",
    "top10_artist\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0c302c0358>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of top 10 popular artists\n",
    "plt.title('Top 10 pop artists')\n",
    "plt.barh(top10_artist['artist'], top10_artist['count']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**auth**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+------+\n",
      "|     auth| count|\n",
      "+---------+------+\n",
      "|Logged In|278102|\n",
      "|Cancelled|    52|\n",
      "+---------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.groupby('auth').count().sort('count', ascending=False).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seems like the 'Cancelled' value represent user churn, there are 52 users cancelled."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**gender**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+------+\n",
      "|gender| count|\n",
      "+------+------+\n",
      "|     F|154578|\n",
      "|     M|123576|\n",
      "+------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.groupby('gender').count().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Among all the records, 55.57% of them are female\n"
     ]
    }
   ],
   "source": [
    "female = df.filter(df.gender == 'F').count()\n",
    "female_prop = female / df.count()\n",
    "print('Among all the records, {:.2%} of them are female'.format(female_prop))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**itemInSession**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-----+\n",
      "|itemInSession|count|\n",
      "+-------------+-----+\n",
      "|            2| 2941|\n",
      "|            3| 2917|\n",
      "|            4| 2887|\n",
      "|            5| 2836|\n",
      "|            1| 2818|\n",
      "|            6| 2803|\n",
      "|            7| 2776|\n",
      "|            8| 2735|\n",
      "|            9| 2693|\n",
      "|            0| 2689|\n",
      "|           10| 2633|\n",
      "|           11| 2596|\n",
      "|           12| 2556|\n",
      "|           13| 2513|\n",
      "|           14| 2485|\n",
      "|           15| 2456|\n",
      "|           16| 2428|\n",
      "|           17| 2385|\n",
      "|           18| 2345|\n",
      "|           19| 2322|\n",
      "+-------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of itemInSession\n",
    "df.groupby('itemInSession').count().orderBy('count', ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+\n",
      "|summary|     itemInSession|\n",
      "+-------+------------------+\n",
      "|  count|            278154|\n",
      "|   mean|114.89918174824018|\n",
      "| stddev|  129.851729399489|\n",
      "|    min|                 0|\n",
      "|    max|              1321|\n",
      "+-------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# statistical description\n",
    "df.describe('itemInSession').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemInSession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   itemInSession\n",
       "0             50\n",
       "1             79\n",
       "2             51\n",
       "3             80\n",
       "4             52"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_df = df.select('itemInSession').toPandas()\n",
    "item_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0c0545d160>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histograme of itemInSession\n",
    "plt.hist(data=item_df, x='itemInSession', bins = np.arange(0, 1400, 50))\n",
    "plt.xticks(np.arange(0, 1400, 50), rotation=90)\n",
    "plt.title('Histogram of itemInSession')\n",
    "plt.xlabel('Item');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The majority have less than 100 items in session, since the histogram is heavily skewed, we will apply a log tranformation to it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0bfc144860>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of itemInSession log transformed\n",
    "plt.hist(data=item_df, x='itemInSession', bins = np.arange(0, 1400, 1))\n",
    "plt.xticks(np.arange(0, 1400, 10), rotation=90)\n",
    "plt.xscale('log')\n",
    "plt.title('Histogram of itemInSession log transformed')\n",
    "plt.xlabel('itemInSession(log)');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a small peak at itemInSession = 2, then it drops down gradually."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**length**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+-----+\n",
      "|   length|count|\n",
      "+---------+-----+\n",
      "| 239.3073| 1205|\n",
      "|348.57751| 1037|\n",
      "|201.79546|  908|\n",
      "|655.77751|  730|\n",
      "|277.15873|  645|\n",
      "|219.66322|  585|\n",
      "|224.67873|  522|\n",
      "|220.89098|  511|\n",
      "|236.09424|  450|\n",
      "|252.21179|  438|\n",
      "|233.69098|  436|\n",
      "|122.04363|  412|\n",
      "|195.94404|  408|\n",
      "|181.21098|  384|\n",
      "|225.17506|  379|\n",
      "|231.81016|  378|\n",
      "|216.76363|  362|\n",
      "|302.05342|  345|\n",
      "|233.89995|  314|\n",
      "|229.58975|  308|\n",
      "+---------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# length frequency\n",
    "df.where(col('length').isNotNull()).groupby('length').count().orderBy('count', ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-----------------+\n",
      "|summary|           length|\n",
      "+-------+-----------------+\n",
      "|  count|           228108|\n",
      "|   mean|249.1171819778458|\n",
      "| stddev|99.23517921058361|\n",
      "|    min|          0.78322|\n",
      "|    max|       3024.66567|\n",
      "+-------+-----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# statistical description of length\n",
    "df.where(col('length').isNotNull()).describe('length').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>277.89016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>236.09424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>282.82730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>262.71302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>223.60771</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      length\n",
       "0  277.89016\n",
       "1  236.09424\n",
       "2  282.82730\n",
       "3  262.71302\n",
       "4  223.60771"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "length_df = df.where(col('length').isNotNull()).select('length').toPandas()\n",
    "length_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(length    0.78322\n",
       " dtype: float64, length    3024.66567\n",
       " dtype: float64)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_length = length_df.min()\n",
    "max_length = length_df.max()\n",
    "min_length, max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0bfd025208>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of length\n",
    "plt.hist(data=length_df, x = 'length', bins = np.arange(0, 3100, 100))\n",
    "plt.xticks(np.arange(0, 3100, 200), rotation=90)\n",
    "plt.title('Histogram of length')\n",
    "plt.xlabel('Length');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above histogram we can see that most of the length are between 100 and 400, however, there are some outliers. We will aplly a log transfomration to see how it looks like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0bfc15a550>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of length log transformed\n",
    "plt.hist(data=length_df, x='length', bins = np.arange(0, 3100, 50))\n",
    "plt.xticks(np.arange(0, 3100, 100), rotation=90)\n",
    "plt.xscale('log')\n",
    "plt.title('Histogram of length')\n",
    "plt.xlabel('Length(log)');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After log transformation, the length looks like normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**level**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+------+\n",
      "|level| count|\n",
      "+-----+------+\n",
      "| free| 55721|\n",
      "| paid|222433|\n",
      "+-----+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of 'level'\n",
    "df.groupby('level').count().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The 'level' variable indicates whether a user is a paid users or a free one. From the count of each value we can see that most of the users are paid users, this also addresses how important it is to predict the user churn of Sparkify."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**location**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+\n",
      "|            location|count|\n",
      "+--------------------+-----+\n",
      "|Los Angeles-Long ...|30131|\n",
      "|New York-Newark-J...|23684|\n",
      "|Boston-Cambridge-...|13873|\n",
      "|Houston-The Woodl...| 9499|\n",
      "|Charlotte-Concord...| 7780|\n",
      "|Dallas-Fort Worth...| 7605|\n",
      "|Louisville/Jeffer...| 6880|\n",
      "|Philadelphia-Camd...| 5890|\n",
      "|Chicago-Napervill...| 5114|\n",
      "|    St. Louis, MO-IL| 4858|\n",
      "|Phoenix-Mesa-Scot...| 4846|\n",
      "|Vineland-Bridgeto...| 4825|\n",
      "|          Wilson, NC| 4659|\n",
      "|Denver-Aurora-Lak...| 4453|\n",
      "|           Ionia, MI| 4428|\n",
      "|San Antonio-New B...| 4373|\n",
      "|        Danville, VA| 4257|\n",
      "|Atlanta-Sandy Spr...| 4236|\n",
      "|New Haven-Milford...| 4007|\n",
      "|         Jackson, MS| 3839|\n",
      "+--------------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of 'location'\n",
    "df.groupby('location').count().orderBy('count', ascending=False).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last two capital letters are the state of the location, we could abstract the state of each location to create a new column and then we will see whether we could find something interesting from there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist='Martha Tilston', auth='Logged In', firstName='Colin', gender='M', itemInSession=50, lastName='Freeman', length=277.89016, level='paid', location='Bakersfield, CA', method='PUT', page='NextSong', registration=1538173362000, sessionId=29, song='Rockpools', status=200, ts=1538352117000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0', userId='30', state='CA')]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a new column 'state' from 'location'\n",
    "get_state = udf(lambda x: x[-2:])\n",
    "df = df.withColumn('state', get_state(df.location))\n",
    "df.take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(state='CA', count=46771),\n",
       " Row(state='PA', count=26607),\n",
       " Row(state='TX', count=23494),\n",
       " Row(state='NH', count=18637),\n",
       " Row(state='FL', count=13190),\n",
       " Row(state='NC', count=11771),\n",
       " Row(state='WI', count=8697),\n",
       " Row(state='MD', count=8600),\n",
       " Row(state='SC', count=8448),\n",
       " Row(state='IN', count=8230)]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# value counts of top 10 states\n",
    "df.groupby('state').count().orderBy('count', ascending=False).take(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**method**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+------+\n",
      "|method| count|\n",
      "+------+------+\n",
      "|   PUT|257818|\n",
      "|   GET| 20336|\n",
      "+------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of 'method'\n",
    "df.groupby('method').count().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**page**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(page='Cancel', count=52),\n",
       " Row(page='Submit Downgrade', count=63),\n",
       " Row(page='Thumbs Down', count=2546),\n",
       " Row(page='Home', count=10082),\n",
       " Row(page='Downgrade', count=2055),\n",
       " Row(page='Roll Advert', count=3933),\n",
       " Row(page='Logout', count=3226),\n",
       " Row(page='Save Settings', count=310),\n",
       " Row(page='Cancellation Confirmation', count=52),\n",
       " Row(page='About', count=495),\n",
       " Row(page='Settings', count=1514),\n",
       " Row(page='Add to Playlist', count=6526),\n",
       " Row(page='Add Friend', count=4277),\n",
       " Row(page='NextSong', count=228108),\n",
       " Row(page='Thumbs Up', count=12551),\n",
       " Row(page='Help', count=1454),\n",
       " Row(page='Upgrade', count=499),\n",
       " Row(page='Error', count=252),\n",
       " Row(page='Submit Upgrade', count=159)]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# value counts of page\n",
    "df.groupby('page').count().collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a few pairs seems interesting:\n",
    "- **'Cancel'(count=52) and 'Cancellation Confirmation'(count=52)**: All the users who pressed the cancel button pressed the confirm button in the next page, they have really made their mind to cancel.\n",
    "- **'Downgrade'(count=2055) and 'Submit Downgrade'(count=63)**:  Although 2055 users are at the Downgrade page, only 63 of them finally submitted a downgrade, about 3%. This is really of great importance since if we know for those who meant to downgrade their service why they finally did not submit the downgrade, we would get a glimpse of an effective way to retain our paid users.\n",
    "- **'Upgrade'(count=499) and 'Submit Upgrade'(count=159)**: among those who are at upgrade page, about 1/3 submitted upgrade. Again, it worth rethinking why these users did not make it to the submit the upgrade, we could look into what stops them from moving forward, maybe the payment page is not designed user friendly?\n",
    "- **'Settings'(count=1514) and 'Save Settings'(count=310)**: for users who are in settings page, only 20% of them saved settings, we understand that maybe some users did not intend to change settings, but there maybe also some users forget to save settings, a kind note to remind the users to save their settings may be something worth trying."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**registration**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-----+\n",
      "| registration|count|\n",
      "+-------------+-----+\n",
      "|1529027541000| 9632|\n",
      "|1533192032000| 1654|\n",
      "|1537779419000|  512|\n",
      "|1534627466000|  187|\n",
      "|1535389443000|  310|\n",
      "|1536642109000| 6880|\n",
      "|1537167593000|  108|\n",
      "|1536854322000|  638|\n",
      "|1533908361000| 1399|\n",
      "|1536817381000|  918|\n",
      "|1536663902000| 2465|\n",
      "|1537672236000| 2130|\n",
      "|1536956945000|  478|\n",
      "|1537611935000| 4659|\n",
      "|1537751138000|  955|\n",
      "|1533532298000|  174|\n",
      "|1537057938000|  651|\n",
      "|1537964483000|   44|\n",
      "|1528772084000|  394|\n",
      "|1537440271000|  940|\n",
      "+-------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of registration\n",
    "df.groupby('registration').count().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each value looks like a timestamp of time the user registered. For users who canceled their service, if we substract the cancelation time with the registration time, we should be able to find out whether there is a specific pattern of churn, whether at a paticulat time after registration, users churn are more likely to happen. We will figure  this out in the later exploration."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**sessionId**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------+-----+\n",
      "|sessionId|count|\n",
      "+---------+-----+\n",
      "|      521|    1|\n",
      "|      519|    1|\n",
      "|      945|    1|\n",
      "|     2261|    1|\n",
      "|      585|    1|\n",
      "|     2429|    1|\n",
      "|      883|    1|\n",
      "|     1444|    1|\n",
      "|      706|    1|\n",
      "|     2356|    1|\n",
      "|     2281|    1|\n",
      "|        7|    1|\n",
      "|     2184|    1|\n",
      "|     1508|    1|\n",
      "|     2088|    1|\n",
      "|      555|    1|\n",
      "|     1642|    1|\n",
      "|      847|    1|\n",
      "|     1374|    1|\n",
      "|     1760|    1|\n",
      "+---------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of sessionId\n",
    "df.groupby('sessionId').count().orderBy('count').show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This variable does not look interesting to us, either. For now we will ignore it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**song**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>song</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>You're The One</td>\n",
       "      <td>1153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Undo</td>\n",
       "      <td>1026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Revelry</td>\n",
       "      <td>854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sehr kosmisch</td>\n",
       "      <td>728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Horn Concerto No. 4 in E flat K495: II. Romanc...</td>\n",
       "      <td>641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Dog Days Are Over (Radio Edit)</td>\n",
       "      <td>574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Secrets</td>\n",
       "      <td>466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Use Somebody</td>\n",
       "      <td>459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Canada</td>\n",
       "      <td>435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Invalid</td>\n",
       "      <td>424</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                song  count\n",
       "0                                     You're The One   1153\n",
       "1                                               Undo   1026\n",
       "2                                            Revelry    854\n",
       "3                                      Sehr kosmisch    728\n",
       "4  Horn Concerto No. 4 in E flat K495: II. Romanc...    641\n",
       "5                     Dog Days Are Over (Radio Edit)    574\n",
       "6                                            Secrets    466\n",
       "7                                       Use Somebody    459\n",
       "8                                             Canada    435\n",
       "9                                            Invalid    424"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# value count\n",
    "top10_songs = df.where(col('song').isNotNull()).groupby('song').count().orderBy('count', ascending=False).toPandas().head(10)\n",
    "top10_songs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0c047c47f0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of top 10 popular artists\n",
    "plt.title('Top 10 pop songs')\n",
    "plt.barh(top10_songs['song'], top10_artist['count']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**status**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+------+\n",
      "|status| count|\n",
      "+------+------+\n",
      "|   307| 23184|\n",
      "|   404|   252|\n",
      "|   200|254718|\n",
      "+------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts of status\n",
    "df.groupby('status').count().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 3 status code:\n",
    "- 200: OK, Standard response for successful HTTP requests\n",
    "- 307: Temporary Redirect (since HTTP/1.1)， In this case, the request should be repeated with another URI; however, future requests should still use the original URI. \n",
    "- 404: Not Found, The requested resource could not be found but may be available in the future. Subsequent requests by the client are permissible."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ts**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-----+\n",
      "|           ts|count|\n",
      "+-------------+-----+\n",
      "|1538360520000|    1|\n",
      "|1538368903000|    1|\n",
      "|1538380099000|    1|\n",
      "|1538380879000|    1|\n",
      "|1538390386000|    1|\n",
      "|1538399222000|    1|\n",
      "|1538402692000|    1|\n",
      "|1538405492000|    1|\n",
      "|1538411816000|    1|\n",
      "|1538420258000|    1|\n",
      "|1538422643000|    1|\n",
      "|1538423103000|    1|\n",
      "|1538428266000|    1|\n",
      "|1538433192000|    1|\n",
      "|1538435390000|    1|\n",
      "|1538439836000|    1|\n",
      "|1538453678000|    1|\n",
      "|1538471202000|    1|\n",
      "|1538494626000|    1|\n",
      "|1538495500000|    1|\n",
      "+-------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value count\n",
    "df.groupby('ts').count().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the timestamp of each of the user's interaction with Sparkify, are there more churn happen in specific time of the day or day of the week? We will figure it out later but for now we need to get the hour and weekday infomation from the timestamp, also we would like to know the earliest and latest timestamp to figure out the duration of this dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a functin to get hour info. from the timestamp\n",
    "get_hour = udf(lambda x: datetime.fromtimestamp(x / 1000.0).hour)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a new column 'hour' from the timestamp\n",
    "df = df.withColumn(\"hour\", get_hour(df.ts).cast('int'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- artist: string (nullable = true)\n",
      " |-- auth: string (nullable = true)\n",
      " |-- firstName: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- lastName: string (nullable = true)\n",
      " |-- length: double (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- location: string (nullable = true)\n",
      " |-- method: string (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- registration: long (nullable = true)\n",
      " |-- sessionId: long (nullable = true)\n",
      " |-- song: string (nullable = true)\n",
      " |-- status: long (nullable = true)\n",
      " |-- ts: long (nullable = true)\n",
      " |-- userAgent: string (nullable = true)\n",
      " |-- userId: string (nullable = true)\n",
      " |-- state: string (nullable = true)\n",
      " |-- hour: integer (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.hour.cast('float')\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(hour=0, count=11079),\n",
       " Row(hour=1, count=10149),\n",
       " Row(hour=2, count=10095),\n",
       " Row(hour=3, count=10126),\n",
       " Row(hour=4, count=9954),\n",
       " Row(hour=5, count=10009),\n",
       " Row(hour=6, count=9801),\n",
       " Row(hour=7, count=9801),\n",
       " Row(hour=8, count=10000),\n",
       " Row(hour=9, count=10217),\n",
       " Row(hour=10, count=10789),\n",
       " Row(hour=11, count=10779),\n",
       " Row(hour=12, count=11459),\n",
       " Row(hour=13, count=11846),\n",
       " Row(hour=14, count=12835),\n",
       " Row(hour=15, count=13936),\n",
       " Row(hour=16, count=14297),\n",
       " Row(hour=17, count=14082),\n",
       " Row(hour=18, count=13599),\n",
       " Row(hour=19, count=13366),\n",
       " Row(hour=20, count=13215),\n",
       " Row(hour=21, count=12688),\n",
       " Row(hour=22, count=12254),\n",
       " Row(hour=23, count=11778)]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# records count by hour\n",
    "df.groupby('hour').count().orderBy(df.hour).collect()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 24 entries, 0 to 23\n",
      "Data columns (total 2 columns):\n",
      "hour     24 non-null int32\n",
      "count    24 non-null int64\n",
      "dtypes: int32(1), int64(1)\n",
      "memory usage: 368.0 bytes\n"
     ]
    }
   ],
   "source": [
    "# convert the result to a dataframe\n",
    "hour_df = df.groupby('hour').count().orderBy(df.hour).toPandas()\n",
    "hour_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0bfc51a940>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot of interactions by hour\n",
    "plt.scatter(hour_df[\"hour\"], hour_df[\"count\"])\n",
    "plt.xlim(-1, 24);\n",
    "plt.ylim(0, 1.2 * max(hour_df[\"count\"]))\n",
    "plt.xlabel(\"Hour\")\n",
    "plt.ylabel(\"Counts of interactions\")\n",
    "plt.xticks(np.arange(0, 25, 1));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a small peak at round 16:00PM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a functin to get weekday info. from the timestamp\n",
    "get_weekday = udf(lambda x: datetime.fromtimestamp(x / 1000.0).weekday())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a new column 'weekday' from the timestamp\n",
    "df = df.withColumn(\"weekday\", get_weekday(df.ts).cast('int'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-----+\n",
      "|weekday|count|\n",
      "+-------+-----+\n",
      "|      0|43252|\n",
      "|      1|47364|\n",
      "|      2|45968|\n",
      "|      3|44320|\n",
      "|      4|48173|\n",
      "|      5|28027|\n",
      "|      6|21050|\n",
      "+-------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value counts \n",
    "df.groupby('weekday').count().orderBy(df.weekday).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7 entries, 0 to 6\n",
      "Data columns (total 2 columns):\n",
      "weekday    7 non-null int32\n",
      "count      7 non-null int64\n",
      "dtypes: int32(1), int64(1)\n",
      "memory usage: 164.0 bytes\n"
     ]
    }
   ],
   "source": [
    "# convet to dataframe\n",
    "weekday_df = df.groupby('weekday').count().orderBy(df.weekday).toPandas()\n",
    "weekday_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0c0478e2b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot of interactions by weekday\n",
    "plt.scatter(weekday_df['weekday'], weekday_df[\"count\"])\n",
    "plt.xlabel('Weekday')\n",
    "plt.ylabel(\"Counts of interactions\")\n",
    "plt.xticks(np.arange(0, 7, 1), (\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"), rotation=90);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot above shows that there are much less interactions on Saturday and Sunday which may indicate that the majority of the users listen to more songs in weekdays instead of on weekends."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+--------------------+\n",
      "|summary|                  ts|\n",
      "+-------+--------------------+\n",
      "|  count|              278154|\n",
      "|   mean|1.540958915431871...|\n",
      "| stddev|1.5068287123306298E9|\n",
      "|    min|       1538352117000|\n",
      "|    max|       1543799476000|\n",
      "+-------+--------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# statistical description\n",
    "df.describe('ts').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the max of ts\n",
    "ts_max = df.agg({\"ts\": \"max\"}).collect()[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the min of ts\n",
    "ts_min = df.agg({\"ts\": \"min\"}).collect()[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The period in this dataset is 63 days\n"
     ]
    }
   ],
   "source": [
    "ts_duration = (datetime.fromtimestamp(ts_max/1000.0) - datetime.fromtimestamp(ts_min/1000.0)).days\n",
    "\n",
    "print('The period in this dataset is {} days'.format(ts_duration))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**userAgent**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Row(userAgent='\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\"', count=22751)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# value counts \n",
    "df.groupby('userAgent').count().orderBy('count', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**userId**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+-----+\n",
      "|userId|count|\n",
      "+------+-----+\n",
      "|    39| 9632|\n",
      "|    92| 7230|\n",
      "|   140| 6880|\n",
      "|300011| 5732|\n",
      "|   124| 4825|\n",
      "|300021| 4659|\n",
      "|300017| 4428|\n",
      "|    85| 4370|\n",
      "|    42| 4257|\n",
      "|200023| 3769|\n",
      "|     6| 3761|\n",
      "|    29| 3603|\n",
      "|    54| 3437|\n",
      "|   100| 3214|\n",
      "|     9| 3191|\n",
      "|   126| 3102|\n",
      "|300015| 3051|\n",
      "|    91| 3014|\n",
      "|    98| 2891|\n",
      "|    74| 2887|\n",
      "+------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# value count\n",
    "df.groupby('userId').count().orderBy('count', ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 225 distinct users, they generated 278154 records\n"
     ]
    }
   ],
   "source": [
    "# distinct users \n",
    "user_count = df.groupby('userId').count().orderBy('count', ascending=False).count()\n",
    "\n",
    "print('There are {} distinct users, they generated {} records'.format(user_count, df.count()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define Churn\n",
    "\n",
    "Based on the preliminary analysis, we would define churn as 'Cancellation Confirmation' events happen. We will create a new variable 'churn' and for each record assign 1 to it if a 'Cancellation Confirmation' happens otherwise assign 0 to it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a function to create churn variable\n",
    "create_churn = udf(lambda x: 1 if x == 'Cancellation Confirmation' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# create churn variable\n",
    "df = df.withColumn('churn', create_churn('page').cast('int'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# double check counts of churn\n",
    "df.where(df.churn == 1).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 52 churns in our dataset, which is consistent with the count of cancelation confirmation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(userId='18'),\n",
       " Row(userId='32'),\n",
       " Row(userId='125'),\n",
       " Row(userId='105'),\n",
       " Row(userId='17'),\n",
       " Row(userId='143'),\n",
       " Row(userId='101'),\n",
       " Row(userId='129'),\n",
       " Row(userId='121'),\n",
       " Row(userId='51'),\n",
       " Row(userId='87'),\n",
       " Row(userId='122'),\n",
       " Row(userId='12'),\n",
       " Row(userId='58'),\n",
       " Row(userId='73'),\n",
       " Row(userId='3'),\n",
       " Row(userId='106'),\n",
       " Row(userId='103'),\n",
       " Row(userId='28'),\n",
       " Row(userId='54'),\n",
       " Row(userId='29'),\n",
       " Row(userId='70'),\n",
       " Row(userId='53'),\n",
       " Row(userId='100011'),\n",
       " Row(userId='100001'),\n",
       " Row(userId='100024'),\n",
       " Row(userId='100006'),\n",
       " Row(userId='100019'),\n",
       " Row(userId='100003'),\n",
       " Row(userId='100023'),\n",
       " Row(userId='100005'),\n",
       " Row(userId='100017'),\n",
       " Row(userId='100025'),\n",
       " Row(userId='100009'),\n",
       " Row(userId='100012'),\n",
       " Row(userId='100013'),\n",
       " Row(userId='100022'),\n",
       " Row(userId='100014'),\n",
       " Row(userId='100015'),\n",
       " Row(userId='100021'),\n",
       " Row(userId='100007'),\n",
       " Row(userId='200001'),\n",
       " Row(userId='200024'),\n",
       " Row(userId='200011'),\n",
       " Row(userId='200021'),\n",
       " Row(userId='200018'),\n",
       " Row(userId='200015'),\n",
       " Row(userId='200017'),\n",
       " Row(userId='200016'),\n",
       " Row(userId='200020'),\n",
       " Row(userId='300007'),\n",
       " Row(userId='300001')]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# userId of churn\n",
    "df.select('userId').where(df.churn == 1).collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**churn rate**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52 distinct users churned\n",
      "The churn rate during 63 days period in this dataset is 23.11%\n"
     ]
    }
   ],
   "source": [
    "churn_user_count = len(set(df.select('userId').where(df.churn == 1).collect()))\n",
    "\n",
    "print('{} distinct users churned'.format(churn_user_count))\n",
    "print('The churn rate during {} days period in this dataset is {:.2%}'.format(ts_duration, churn_user_count/user_count))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**churned user**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist=None, auth='Cancelled', firstName='Adriel', gender='M', itemInSession=104, lastName='Mendoza', length=None, level='paid', location='Kansas City, MO-KS', method='GET', page='Cancellation Confirmation', registration=1535623466000, sessionId=514, song=None, status=200, ts=1538943990000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.77.4 (KHTML, like Gecko) Version/7.0.5 Safari/537.77.4\"', userId='18', state='KS', hour=20, weekday=6, churn=1),\n",
       " Row(artist=None, auth='Cancelled', firstName='Diego', gender='M', itemInSession=56, lastName='Mckee', length=None, level='paid', location='Phoenix-Mesa-Scottsdale, AZ', method='GET', page='Cancellation Confirmation', registration=1537167593000, sessionId=540, song=None, status=200, ts=1539033046000, userAgent='\"Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53\"', userId='32', state='AZ', hour=21, weekday=0, churn=1)]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# first 2 records of churn\n",
    "df.where(df.churn == 1).take(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above we can see that the 'artist', 'length', 'song' variables are of value 'None', this make sense due to the way we defined churn. Churn is defined as user has a behavior of cancelation confirmation. On that concelation confirmation page, the user is not listening to any songs, so the value of 'artist', 'length', 'song' would be none. \n",
    "However, churn value of other records of the same user is still 0, for consistency, we will introduce another variable 'churned_user' to figure out the churned users."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get a list of the churned users\n",
    "churn_user_list = [row.userId for row in df.select('userId').where(df.churn == 1).collect()] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=0, churned_user=1.0),\n",
       " Row(userId='18', churn=1, churned_user=1.0)]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define a function and assgin 1 to churn if the userID is in churned users list\n",
    "get_churned_user = udf(lambda x, y: 1 if y in churn_user_list else 0)\n",
    "df = df.withColumn('churned_user', get_churned_user('churn', 'userId').cast('float'))\n",
    "df.filter(df.userId == '18').select('userId', 'churn', 'churned_user').collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take user of userId'18' for instance, the churned_user value for every record is 1, the churn value is 0 except for the last record where the user issued cancelation confirmation. Looks good, just the way we have expected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore Data\n",
    "\n",
    "Now that we have defined the churn and explored the churn rate, we will first have a look at the churned records as well as all the records of the churned user. Then we will explore the other variables together with churn variable to see whether there are some significant difference between the behaviors of churned users and users who did not churn.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Row(artist=None, auth='Cancelled', firstName='Adriel', gender='M', itemInSession=104, lastName='Mendoza', length=None, level='paid', location='Kansas City, MO-KS', method='GET', page='Cancellation Confirmation', registration=1535623466000, sessionId=514, song=None, status=200, ts=1538943990000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.77.4 (KHTML, like Gecko) Version/7.0.5 Safari/537.77.4\"', userId='18', state='KS', hour=20, weekday=6, churn=1, churned_user=1.0)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# subset of churn records\n",
    "churn = df.where(df.churn == 1)\n",
    "churn.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# subset of churned users' records\n",
    "churned_user = df.where(df.churned_user == 1)\n",
    "churned_user.select('userId').distinct().orderBy('userId').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**artist VS churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>artist</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kings Of Leon</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Coldplay</td>\n",
       "      <td>261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Florence + The Machine</td>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Black Keys</td>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dwight Yoakam</td>\n",
       "      <td>183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BjÃÂ¶rk</td>\n",
       "      <td>171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Justin Bieber</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Muse</td>\n",
       "      <td>164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Radiohead</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Jack Johnson</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   artist  count\n",
       "0           Kings Of Leon    299\n",
       "1                Coldplay    261\n",
       "2  Florence + The Machine    188\n",
       "3          The Black Keys    185\n",
       "4           Dwight Yoakam    183\n",
       "5                BjÃÂ¶rk    171\n",
       "6           Justin Bieber    168\n",
       "7                    Muse    164\n",
       "8               Radiohead    156\n",
       "9            Jack Johnson    155"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# top 10 artist listened by churned users\n",
    "churned_artist_df = churned_user.where(col('artist').isNotNull()).groupby('artist').count().sort('count', ascending=False).toPandas()\n",
    "churned_artist_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>artist</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kings Of Leon</td>\n",
       "      <td>1841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Coldplay</td>\n",
       "      <td>1813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Florence + The Machine</td>\n",
       "      <td>1236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dwight Yoakam</td>\n",
       "      <td>1135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BjÃÂ¶rk</td>\n",
       "      <td>1133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>The Black Keys</td>\n",
       "      <td>1125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Muse</td>\n",
       "      <td>1090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Justin Bieber</td>\n",
       "      <td>1044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Jack Johnson</td>\n",
       "      <td>1007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Eminem</td>\n",
       "      <td>953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   artist  count\n",
       "0           Kings Of Leon   1841\n",
       "1                Coldplay   1813\n",
       "2  Florence + The Machine   1236\n",
       "3           Dwight Yoakam   1135\n",
       "4                BjÃÂ¶rk   1133\n",
       "5          The Black Keys   1125\n",
       "6                    Muse   1090\n",
       "7           Justin Bieber   1044\n",
       "8            Jack Johnson   1007\n",
       "9                  Eminem    953"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# top 10 listened artist by all users\n",
    "top10_artist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although the top 10 artists list are not exactly the same, 90% are the same, seems like there is no enough evidence to say that users who listen to some artists are more likely to churn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**gender VS churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>churned_user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  gender  churned_user\n",
       "0      M           0.0\n",
       "1      M           0.0\n",
       "2      M           0.0\n",
       "3      M           0.0\n",
       "4      M           0.0"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a dataframe including gender and churn variables\n",
    "gender_churn_df = df.select('gender', 'churned_user').toPandas()\n",
    "gender_churn_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0c0487f588>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of churn by gender\n",
    "sb.countplot(x='churned_user', hue='gender', data=gender_churn_df)\n",
    "plt.xticks((0, 1),('not churned', 'churned'))\n",
    "plt.title('Gender VS Churn')\n",
    "plt.savefig('Gender VS Churn.png');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot above indicates that more males churned than females, less males stayed than females. Males are more likely to churn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**level VS churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>level</th>\n",
       "      <th>churned_user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>paid</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>free</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>paid</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>free</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>paid</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  level  churned_user\n",
       "0  paid           0.0\n",
       "1  free           0.0\n",
       "2  paid           0.0\n",
       "3  free           0.0\n",
       "4  paid           0.0"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a dataframe including level and churn variables\n",
    "level_churn_df = df.select('level', 'churned_user').toPandas()\n",
    "level_churn_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fab8c7171d0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of churn by level\n",
    "sb.countplot(x='level', hue='churned_user', data=level_churn_df)\n",
    "plt.title('Churn VS level');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above plot alone it is hard to tell whether free users or paid users are more likely to churn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**registration(survied days) VS churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Row(artist=None, auth='Cancelled', firstName='Adriel', gender='M', itemInSession=104, lastName='Mendoza', length=None, level='paid', location='Kansas City, MO-KS', method='GET', page='Cancellation Confirmation', registration=1535623466000, sessionId=514, song=None, status=200, ts=1538943990000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.77.4 (KHTML, like Gecko) Version/7.0.5 Safari/537.77.4\"', userId='18', state='KS', hour=20, weekday=6, churn=1, churned_user=1.0, survived_days='38')"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a new 'survived days' to explore whether the churned users churn at a specific period of time\n",
    "get_survived_days = udf(lambda x, y: (datetime.fromtimestamp(x/1000.0) - datetime.fromtimestamp(y/1000.0)).days)\n",
    "churn = churn.withColumn('survived_days', get_survived_days(churn.ts, churn.registration))\n",
    "churn.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survived_days</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  survived_days  count\n",
       "0            44      3\n",
       "1            85      2\n",
       "2            60      2\n",
       "3            53      2\n",
       "4            15      1"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# explore survived days\n",
    "survived_days_df = churn.groupby('survived_days').count().orderBy('count', ascending=False).toPandas()\n",
    "survived_days_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although there are 3 users churned on day 44, 2 users churned on day 85, day 60, day 53  each, there is no significant evidance that the survival days in this dataset follows a specific pattern. Below we will keep exploring whether churn has significant difference when combined with other variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**page(activity) VS churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>churned_user</th>\n",
       "      <th>userId</th>\n",
       "      <th>page</th>\n",
       "      <th>ts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>NextSong</td>\n",
       "      <td>1538352117000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9</td>\n",
       "      <td>NextSong</td>\n",
       "      <td>1538352180000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>NextSong</td>\n",
       "      <td>1538352394000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>9</td>\n",
       "      <td>NextSong</td>\n",
       "      <td>1538352416000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>NextSong</td>\n",
       "      <td>1538352676000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   churned_user userId      page             ts\n",
       "0           0.0     30  NextSong  1538352117000\n",
       "1           0.0      9  NextSong  1538352180000\n",
       "2           0.0     30  NextSong  1538352394000\n",
       "3           0.0      9  NextSong  1538352416000\n",
       "4           0.0     30  NextSong  1538352676000"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a subset with columns 'churned_user', 'userId', 'page', 'ts'\n",
    "page_churn_df = df.select('churned_user', 'userId', 'page', 'ts').toPandas()\n",
    "page_churn_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['NextSong',\n",
       " 'Add to Playlist',\n",
       " 'Roll Advert',\n",
       " 'Thumbs Up',\n",
       " 'Downgrade',\n",
       " 'Thumbs Down',\n",
       " 'Home',\n",
       " 'Logout',\n",
       " 'Help',\n",
       " 'Upgrade',\n",
       " 'Add Friend',\n",
       " 'Settings',\n",
       " 'Submit Upgrade',\n",
       " 'About',\n",
       " 'Submit Downgrade',\n",
       " 'Error',\n",
       " 'Save Settings',\n",
       " 'Cancel',\n",
       " 'Cancellation Confirmation']"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# list all activities\n",
    "list(page_churn_df.page.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get a list of activities we would like to explore\n",
    "page_list = ['NextSong', 'Add to Playlist', 'Roll Advert', 'Thumbs Up', 'Downgrade', 'Thumbs Down', 'Home', 'Logout', \n",
    "             'Help', 'Upgrade', 'Add Friend', 'Settings', 'Submit Upgrade', 'About', 'Submit Downgrade', 'Error']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get a subset of selected page value\n",
    "page_churn_sub = page_churn_df[page_churn_df.page.isin(page_list)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NextSong            225\n",
       "Home                223\n",
       "Thumbs Up           220\n",
       "Add to Playlist     215\n",
       "Logout              213\n",
       "Roll Advert         207\n",
       "Add Friend          206\n",
       "Thumbs Down         203\n",
       "Settings            195\n",
       "Help                192\n",
       "Upgrade             168\n",
       "About               155\n",
       "Downgrade           154\n",
       "Submit Upgrade      131\n",
       "Error               117\n",
       "Submit Downgrade     49\n",
       "Name: page, dtype: int64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a subset of value counts of each page activity\n",
    "page_churn_count = page_churn_sub.groupby([ 'page', 'churned_user', 'userId']).count().reset_index().rename(columns={'ts': 'count'})\n",
    "page_churn_count['page'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>page</th>\n",
       "      <th>churned_user</th>\n",
       "      <th>userId</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>About</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>Add Friend</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>553</th>\n",
       "      <td>Add to Playlist</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>711</th>\n",
       "      <td>Downgrade</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1018</th>\n",
       "      <td>Help</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239</th>\n",
       "      <td>Home</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1453</th>\n",
       "      <td>Logout</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1677</th>\n",
       "      <td>NextSong</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2082</th>\n",
       "      <td>Settings</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2462</th>\n",
       "      <td>Thumbs Down</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2682</th>\n",
       "      <td>Thumbs Up</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 page  churned_user userId  count\n",
       "140             About           1.0     18      1\n",
       "341        Add Friend           1.0     18     10\n",
       "553   Add to Playlist           1.0     18     14\n",
       "711         Downgrade           1.0     18      3\n",
       "1018             Help           1.0     18      1\n",
       "1239             Home           1.0     18     19\n",
       "1453           Logout           1.0     18      7\n",
       "1677         NextSong           1.0     18    429\n",
       "2082         Settings           1.0     18      5\n",
       "2462      Thumbs Down           1.0     18      1\n",
       "2682        Thumbs Up           1.0     18     20"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "page_churn_count[page_churn_count.userId == '18']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fab8cfe72b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# box plot for each page activity\n",
    "plt.figure(figsize=(20, 20))\n",
    "for i in range(1, len(page_list)+1):\n",
    "    plt.subplot(4, 4, i)\n",
    "    activity = page_list[i-1]\n",
    "    sb.boxplot(x='page', y='count', data=page_churn_count[page_churn_count.page == activity], hue='churned_user')\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**From the boxplot above we can see that**:\n",
    "\n",
    "- Churned users have less number of these following activities than users who stayed: 'NextSong', 'Add to Playlist', 'Thumbs Up', 'Downgrade',  'Home', 'Help', 'Add Friend', 'Settings', 'About', 'Submit Downgrade', 'Error']\n",
    "- Churned users have a little higher median and much high max for roll adcert count than user stayed \n",
    "- Churned users and not churned users do not have significant difference in count of 'Thumbs Down', 'Logout' and 'Upgrade', 'Submit Upgrade' activities.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**hour VS churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hour  count\n",
       "0     0      3\n",
       "1     1      1\n",
       "2     2      1\n",
       "3     3      2\n",
       "4     4      2"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a dataframe of churn by hour\n",
    "hour_churn_df = df.filter(df.churn == 1).select('hour', 'churn').groupby('hour').count().orderBy(df.hour).toPandas()\n",
    "hour_churn_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fab836c6ba8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot of interactions by hour\n",
    "plt.figure(figsize=(8, 7))\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.scatter(hour_df[\"hour\"], hour_df[\"count\"])\n",
    "plt.xlim(-1, 24);\n",
    "plt.ylim(0, 1.2 * max(hour_df[\"count\"]))\n",
    "plt.ylabel(\"Counts of interactions\")\n",
    "plt.xticks(np.arange(0, 25, 1))\n",
    "plt.title('Interactions by Hour')\n",
    "\n",
    "# scatter plot of churns by hour\n",
    "plt.subplot(2, 1, 2)\n",
    "plt.scatter(hour_churn_df[\"hour\"], hour_churn_df[\"count\"])\n",
    "plt.xlim(-1, 24);\n",
    "plt.ylim(0, 1.2 * max(hour_churn_df[\"count\"]))\n",
    "plt.xlabel(\"Hour\")\n",
    "plt.ylabel(\"Counts of churns\")\n",
    "plt.xticks(np.arange(0, 25, 1))\n",
    "plt.title('Churns by Hour');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above we can see that although the peak of interactions appears at around 16:00, more churns happen around 7AM and 7PM, about the time people on their way to work or get off work."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Weekday VS Churn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weekday</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   weekday  count\n",
       "0        0      9\n",
       "1        1      6\n",
       "2        2      7\n",
       "3        3      5\n",
       "4        4     13"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a dataframe of churn by hour\n",
    "wd_churn_df = df.filter(df.churn == 1).select('weekday', 'churn').groupby('weekday').count().orderBy(df.weekday).toPandas()\n",
    "wd_churn_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fab84e707b8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot of interactions by weekday\n",
    "plt.figure(figsize=(12, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.scatter(weekday_df['weekday'], weekday_df[\"count\"])\n",
    "plt.ylabel(\"Counts of interactions\")\n",
    "plt.xticks(np.arange(0, 7, 1), (\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"), rotation=15)\n",
    "plt.title('Interactions by Weekday')\n",
    "plt.xlabel('Weekday')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.scatter(wd_churn_df['weekday'], wd_churn_df[\"count\"])\n",
    "plt.xlabel('Weekday')\n",
    "plt.ylabel(\"Counts of churns\")\n",
    "plt.xticks(np.arange(0, 7, 1), (\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"), rotation=15)\n",
    "plt.title('Churns by Weekday');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the plot above we can see that although there are much more interactions in weekdays(Monday through Friday), Friday has the most churns.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Engineering\n",
    "Once you've familiarized yourself with the data, build out the features you find promising to train your model on. To work with the full dataset, you can follow the following steps.\n",
    "- Write a script to extract the necessary features from the smaller subset of data\n",
    "- Ensure that your script is scalable, using the best practices discussed in Lesson 3\n",
    "- Try your script on the full data set, debugging your script if necessary\n",
    "\n",
    "If you are working in the classroom workspace, you can just extract features based on the small subset of data contained here. Be sure to transfer over this work to the larger dataset when you work on your Spark cluster."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the exploration above, the features we are going to keep are as following:\n",
    "\n",
    "['gender',\n",
    " 'itemInSession',\n",
    " 'page',\n",
    " 'userAgent',\n",
    " 'state',\n",
    " 'hour',\n",
    " 'weekday',\n",
    " 'churn',\n",
    " 'churned_user']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- userAgent: string (nullable = true)\n",
      " |-- state: string (nullable = true)\n",
      " |-- hour: integer (nullable = true)\n",
      " |-- weekday: integer (nullable = true)\n",
      " |-- churn: integer (nullable = true)\n",
      " |-- churned_user: float (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# select features to keep\n",
    "to_keep = ['gender', 'itemInSession', 'page', 'userAgent', 'state', 'hour', \n",
    "           'weekday', 'churn', 'churned_user']\n",
    "df_sub = df.select(to_keep)\n",
    "df_sub.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# transfer categorical variables to int\n",
    "indexer = StringIndexer(inputCol='gender', outputCol='genderInd')\n",
    "df_sub = indexer.fit(df_sub).transform(df_sub)\n",
    "\n",
    "indexer = StringIndexer(inputCol='page', outputCol='pageInd')\n",
    "df_sub = indexer.fit(df_sub).transform(df_sub)\n",
    "\n",
    "indexer = StringIndexer(inputCol='userAgent', outputCol='userAgentInd')\n",
    "df_sub = indexer.fit(df_sub).transform(df_sub)\n",
    "\n",
    "indexer = StringIndexer(inputCol='state', outputCol='stateInd')\n",
    "df_sub = indexer.fit(df_sub).transform(df_sub)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+----+-------+-----+------------+---------+-------+------------+--------+\n",
      "|itemInSession|hour|weekday|churn|churned_user|genderInd|pageInd|userAgentInd|stateInd|\n",
      "+-------------+----+-------+-----+------------+---------+-------+------------+--------+\n",
      "|           50|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           79|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|           51|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           80|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|           52|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           81|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|           82|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|           53|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           54|   0|      0|    0|         0.0|      1.0|    3.0|         4.0|     0.0|\n",
      "|           55|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           83|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|           84|   0|      0|    0|         0.0|      1.0|    5.0|         6.0|     3.0|\n",
      "|           56|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           85|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|           86|   0|      0|    0|         0.0|      1.0|    1.0|         6.0|     3.0|\n",
      "|           57|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           87|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "|            0|   0|      0|    0|         0.0|      0.0|    0.0|        12.0|     4.0|\n",
      "|           58|   0|      0|    0|         0.0|      1.0|    0.0|         4.0|     0.0|\n",
      "|           88|   0|      0|    0|         0.0|      1.0|    0.0|         6.0|     3.0|\n",
      "+-------------+----+-------+-----+------------+---------+-------+------------+--------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# drop the original categorical variables\n",
    "columns_to_drop = ['gender', 'page', 'userAgent', 'state']\n",
    "df_sub = df_sub.drop(*columns_to_drop)\n",
    "df_sub.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get features\n",
    "assembler = VectorAssembler(\n",
    "    inputCols=['itemInSession', 'hour', 'weekday', 'churn', 'genderInd',\n",
    "               'pageInd', 'userAgentInd', 'stateInd'],\n",
    "    outputCol='featuresRaw')\n",
    "\n",
    "df_sub = assembler.transform(df_sub)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get label\n",
    "df_sub = df_sub.withColumnRenamed('churned_user', 'label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "# standard scaler\n",
    "scaler = StandardScaler(inputCol='featuresRaw', outputCol='features', withStd=True)\n",
    "scalerModel = scaler.fit(df_sub)\n",
    "df_sub = scalerModel.transform(df_sub)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+----+-------+-----+-----+---------+-------+------------+--------+--------------------+\n",
      "|itemInSession|hour|weekday|churn|label|genderInd|pageInd|userAgentInd|stateInd|            features|\n",
      "+-------------+----+-------+-----+-----+---------+-------+------------+--------+--------------------+\n",
      "|           50|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.385...|\n",
      "|           79|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|           51|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.392...|\n",
      "|           80|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|           52|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.400...|\n",
      "|           81|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|           82|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|           53|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.408...|\n",
      "|           54|   0|      0|    0|  0.0|      1.0|    3.0|         4.0|     0.0|(8,[0,4,5,6],[0.4...|\n",
      "|           55|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.423...|\n",
      "|           83|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|           84|   0|      0|    0|  0.0|      1.0|    5.0|         6.0|     3.0|[0.64689165395382...|\n",
      "|           56|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.431...|\n",
      "|           85|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|           86|   0|      0|    0|  0.0|      1.0|    1.0|         6.0|     3.0|[0.66229383619081...|\n",
      "|           57|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.438...|\n",
      "|           87|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "|            0|   0|      0|    0|  0.0|      0.0|    0.0|        12.0|     4.0|(8,[6,7],[1.01512...|\n",
      "|           58|   0|      0|    0|  0.0|      1.0|    0.0|         4.0|     0.0|(8,[0,4,6],[0.446...|\n",
      "|           88|   0|      0|    0|  0.0|      1.0|    0.0|         6.0|     3.0|(8,[0,4,6,7],[0.6...|\n",
      "+-------------+----+-------+-----+-----+---------+-------+------------+--------+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_sub.drop('featuresRaw').show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling\n",
    "In this section, we will build a machine learning model to predict whether a user will churn or not. To do this:\n",
    "- First we will split the full dataset into train, test, and validation sets. \n",
    "- Then we will fit the train set to three different classifiers: Logistic regreesion, SVM, Random Forest, use the validation set to figure out which classifier performs best. For metrics, since in our case, most of the users did not churn, the data is skewed, accuracy may be misleading here, we will use F1 Score instead\n",
    "- After finding out the best classifier, we will try to find the best model by tuning the hyperparameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**train test split**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# randomly split 60%, 20%, 20% of the dataset into train, validation and test set.\n",
    "train, rest = df_sub.randomSplit([0.6, 0.4], seed=42)\n",
    "validation, test = rest.randomSplit([0.5, 0.5], seed=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**model selection**\n",
    "\n",
    "This this section we will three models below and see which model has the highet F1 score:\n",
    "- Logistic Regression\n",
    "- SVM\n",
    "- Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Untuned Logistic Regression Classifier: \n",
      "\n",
      "The F1_Score is: 0.7675693642809792 \n",
      "\n",
      "For Untuned SVM Classifier: \n",
      "\n",
      "The F1_Score is: 0.766811510188137 \n",
      "\n",
      "For Untuned Random Forest Classifier: \n",
      "\n",
      "The F1_Score is: 0.8860992410452636 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# loop over 3 untuned classifiers to select the best classifier\n",
    "lr = LogisticRegression(featuresCol='features', labelCol='label')\n",
    "svm = LinearSVC(featuresCol='features', labelCol='label')\n",
    "rf = RandomForestClassifier(featuresCol='features', labelCol='label')\n",
    "cfs = [lr, svm, rf]\n",
    "cf_names = ['Logistic Regression', 'SVM', 'Random Forest']\n",
    "\n",
    "# evaluator\n",
    "evaluator = MulticlassClassificationEvaluator(metricName='f1')\n",
    "\n",
    "# paramGrid\n",
    "paramGrid = ParamGridBuilder() \\\n",
    "    .build()\n",
    "\n",
    "for i in range(0, 3):\n",
    "    print('For Untuned {} Classifier: \\n'.format(cf_names[i]))\n",
    "    crossval = CrossValidator(estimator=cfs[i],\n",
    "                          estimatorParamMaps=paramGrid,\n",
    "                          evaluator=evaluator,\n",
    "                          numFolds=3)\n",
    "    start = time()\n",
    "    cv_model = crossval.fit(train)\n",
    "    result = cv_model.transform(validation)\n",
    "    evaluator = MulticlassClassificationEvaluator(predictionCol='prediction')\n",
    "    f1_score = evaluator.evaluate(result, {evaluator.metricName: \"f1\"})\n",
    "    end = time()\n",
    "    duration = end - start\n",
    "    print('It takes {} seconds to run'.format(duration))\n",
    "    print('The F1_Score is: {} \\n'.format(f1_score))\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Random Forest model over-performs the other two. In the section below we will tune the Random Forest model to get the best model.\n",
    "\n",
    "**Hyperparameters tuning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The F1_Score is: 0.9336901006124744 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(featuresCol='features', labelCol='label')\n",
    "paramGrid = ParamGridBuilder() \\\n",
    "    .addGrid(rf.numTrees, [2, 4, 6, 8]) \\\n",
    "    .addGrid(rf.maxDepth, [2, 4, 6, 8]) \\\n",
    "    .build()\n",
    "evaluator = MulticlassClassificationEvaluator(metricName='f1')\n",
    "\n",
    "crossval = CrossValidator(estimator=rf,\n",
    "                          estimatorParamMaps=paramGrid,\n",
    "                          evaluator=evaluator,\n",
    "                          numFolds=3)\n",
    "cv_model = crossval.fit(train)\n",
    "result = cv_model.transform(test)\n",
    "evaluator = MulticlassClassificationEvaluator(predictionCol='prediction')\n",
    "f1_score = evaluator.evaluate(result, {evaluator.metricName: \"f1\"})\n",
    "print('The F1_Score of the best model is: {} \\n'.format(f1_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After tuned, the best model has a F1_score of 0.934 conpared to 0.886 of the untuned model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion and Reflection**\n",
    "\n",
    "In this part, we trained three classifiers and found that Randorm Forest performs best. The tuned Random Forest model got a F1 score as high as 0.934. XGBoost could perform better than Random Forest, however it is not available in Pyspark.  Seems like in Pyspark interpretation of the feature importance and best parameters is not as intuitive as in sklearn.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
